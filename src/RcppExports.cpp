// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// boot_mean_interval
Rcpp::List boot_mean_interval(NumericVector& tratamento, NumericVector& controle, int& B_size, int& replicas, float inf, float sup);
RcppExport SEXP _magikaRp_boot_mean_interval(SEXP tratamentoSEXP, SEXP controleSEXP, SEXP B_sizeSEXP, SEXP replicasSEXP, SEXP infSEXP, SEXP supSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type tratamento(tratamentoSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type controle(controleSEXP);
    Rcpp::traits::input_parameter< int& >::type B_size(B_sizeSEXP);
    Rcpp::traits::input_parameter< int& >::type replicas(replicasSEXP);
    Rcpp::traits::input_parameter< float >::type inf(infSEXP);
    Rcpp::traits::input_parameter< float >::type sup(supSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_mean_interval(tratamento, controle, B_size, replicas, inf, sup));
    return rcpp_result_gen;
END_RCPP
}
// boot_mean_rel_interval
Rcpp::List boot_mean_rel_interval(NumericVector& tratamento, NumericVector& controle, int& B_size, int& replicas, float inf, float sup);
RcppExport SEXP _magikaRp_boot_mean_rel_interval(SEXP tratamentoSEXP, SEXP controleSEXP, SEXP B_sizeSEXP, SEXP replicasSEXP, SEXP infSEXP, SEXP supSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type tratamento(tratamentoSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type controle(controleSEXP);
    Rcpp::traits::input_parameter< int& >::type B_size(B_sizeSEXP);
    Rcpp::traits::input_parameter< int& >::type replicas(replicasSEXP);
    Rcpp::traits::input_parameter< float >::type inf(infSEXP);
    Rcpp::traits::input_parameter< float >::type sup(supSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_mean_rel_interval(tratamento, controle, B_size, replicas, inf, sup));
    return rcpp_result_gen;
END_RCPP
}
// boot_prop_interval
Rcpp::List boot_prop_interval(NumericVector& tratamento, NumericVector& controle, int& B_size, int& replicas, float inf, float sup);
RcppExport SEXP _magikaRp_boot_prop_interval(SEXP tratamentoSEXP, SEXP controleSEXP, SEXP B_sizeSEXP, SEXP replicasSEXP, SEXP infSEXP, SEXP supSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type tratamento(tratamentoSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type controle(controleSEXP);
    Rcpp::traits::input_parameter< int& >::type B_size(B_sizeSEXP);
    Rcpp::traits::input_parameter< int& >::type replicas(replicasSEXP);
    Rcpp::traits::input_parameter< float >::type inf(infSEXP);
    Rcpp::traits::input_parameter< float >::type sup(supSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_prop_interval(tratamento, controle, B_size, replicas, inf, sup));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_magikaRp_boot_mean_interval", (DL_FUNC) &_magikaRp_boot_mean_interval, 6},
    {"_magikaRp_boot_mean_rel_interval", (DL_FUNC) &_magikaRp_boot_mean_rel_interval, 6},
    {"_magikaRp_boot_prop_interval", (DL_FUNC) &_magikaRp_boot_prop_interval, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_magikaRp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
